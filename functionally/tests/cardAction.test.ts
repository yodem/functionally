// Generated by CodiumAI

import { derivative } from '../lib/cardActions';
import { expect, it, describe } from 'bun:test';
import { Card, CardType } from '../lib/types';

// Given a valid functionCard with a string value, the function should return a Card object with the derivative value as a string.
it('should return a Card object with the derivative value as a string when given a valid functionCard', () => {
  // Arrange
  const functionCard: Card = {
    type: CardType.Function,
    value: '2*x^2 + 3*x + 1',
  };

  // Act
  const result = derivative(functionCard);

  // Assert
  expect(result).toEqual({
    type: CardType.Function,
    value: '4 * x + 3',
  });
});

// Given a valid functionCard with a string value, the function should return a Card object with the derivative value as a string.
it('should return a Card object with the derivative value as a string when given a valid functionCard', () => {
  // Arrange
  const functionCard: Card = {
    type: CardType.Function,
    value: '2*x^2 + 3*x + 1',
  };

  // Act
  const result = derivative(functionCard);

  // Assert
  expect(result).toEqual({
    type: CardType.Function,
    value: '4 * x + 3',
  });
});

// Given a functionCard with a non-string value, the function should return the same card object without any changes.
it('should return the same card object when given a functionCard with a non-string value', () => {
  // Arrange
  const functionCard: Card = {
    type: CardType.Function,
    value: 5,
  };

  // Act
  const result = derivative(functionCard);

  // Assert
  expect(result).toEqual(functionCard);
});

// Given a functionCard with a null value, the function should return the same card object without any changes.
it('should return the same card object when given a functionCard with a null value', () => {
  // Arrange
  const functionCard: Card = {
    type: CardType.Function,
    value: null,
  };

  // Act
  const result = derivative(functionCard);

  // Assert
  expect(result).toEqual(functionCard);
});

// Given a functionCard with an undefined value, the function should return the same card object without any changes.
it('should return the same card object when given a functionCard with an undefined value', () => {
  // Arrange
  const functionCard: Card = {
    type: CardType.Function,
    value: undefined,
  };

  // Act
  const result = derivative(functionCard);

  // Assert
  expect(result).toEqual(functionCard);
});

// Should return a Card object with the derivative value as a string when given a valid functionCard with a string value.
it('should return a Card object with the derivative value as a string when given a valid functionCard with a string value', () => {
  // Arrange
  const functionCard: Card = {
    type: CardType.Function,
    value: '(x^3)-(2*x^2)+x',
  };

  // Act
  const result = derivative(functionCard);

  // Assert
  expect(result).toEqual({
    type: CardType.Function,
    value: '3 * x ^ 2 + 1 - 4 * x',
  });
});

it('should return a Card object with the derivative value as a string when given a functionCard with a sqrt function', () => {
  // Arrange
  const functionCard: Card = {
    type: CardType.Function,
    value: 'sqrt(x)',
  };

  // Act
  const result = derivative(functionCard);

  // Assert
  expect(result).toEqual({
    type: CardType.Function,
    value: '1 / 2 / sqrt(x)', // This is the derivative of sqrt(x)
  });
});
